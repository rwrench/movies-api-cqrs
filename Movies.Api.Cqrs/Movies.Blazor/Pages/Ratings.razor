@page "/ratings"
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.DataSource
@using global::Movies.Api.Contracts.Dto
@using global::Movies.Api.Contracts.Services
@inject IRatingService RatingService

<PageTitle>Ratings</PageTitle>

<h1>Ratings</h1>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(isError ? "alert-danger" : "alert-success")" role="alert">
        @statusMessage
    </div>
}

<TelerikGrid Data="@ratings"
             Pageable="true"
             PageSize="20"
             Sortable="true"
             Height="80vh"
             FilterMode="Telerik.Blazor.GridFilterMode.FilterRow"
             EditMode="GridEditMode.Inline"
             Resizable="true"
             @ref="gridRef"
             OnUpdate="@OnUpdateHandler"
             OnDelete="@OnDeleteHandler"
             OnCreate="@OnCreateHandler"
             OnEdit="@OnEditHandler"
             OnCancel="@OnCancelHandler">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add">Add Rating</GridCommandButton>
    </GridToolBarTemplate>
    <GridColumns>
        <GridColumn Field="MovieName" Title="Movie" Width="400px">
            <EditorTemplate Context="context">
                @{
                    var rating = context as MovieRatingWithNameDto;
                    if (rating != null)
                    {
                        <TelerikComboBox Data="@allMoviesForDropdown"
                                         TextField="@nameof(MovieDropdownDto.DisplayText)"
                                         ValueField="@nameof(MovieDropdownDto.Id)"
                                         @bind-Value="@rating.MovieId"
                                         Placeholder="Select a movie..."
                                         Filterable="true"
                                         FilterOperator="@StringFilterOperator.StartsWith"
                                         ShowClearButton="true"
                                         Width="100%" />
                    }
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field="Rating" Title="Rating" Editable="true" Width="120px" />
        <GridColumn Field="DateUpdated" Title="Date Updated" Width="200px" />
        <GridCommandColumn Width="280px">
            <GridCommandButton Command="Edit" ShowInEdit="false">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" ShowInEdit="false">Delete</GridCommandButton>
            <GridCommandButton Command="Save" ShowInEdit="true">Save</GridCommandButton>
            <GridCommandButton Command="Cancel" ShowInEdit="true">Cancel</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {
    private List<MovieRatingWithNameDto> ratings = new();
    private List<MovieDropdownDto> allMoviesForDropdown = new();
    private TelerikGrid<MovieRatingWithNameDto>? gridRef;
    private string statusMessage = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Load both ratings and all movies at once
            var ratingsTask = RatingService.GetRatingsAsync();
            var moviesTask = RatingService.GetAllMoviesForDropdownAsync();

            await Task.WhenAll(ratingsTask, moviesTask);

            ratings = await ratingsTask;
            allMoviesForDropdown = await moviesTask;

            SetStatusMessage($"Loaded {ratings.Count} ratings and {allMoviesForDropdown.Count} movies", false);
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error loading data: {ex.Message}", true);
        }
    }

    private Task OnEditHandler(GridCommandEventArgs e) => Task.CompletedTask;

    private Task OnCancelHandler(GridCommandEventArgs e)
    {
        ClearStatusMessage();
        return Task.CompletedTask;
    }

    private async Task OnUpdateHandler(GridCommandEventArgs e)
    {
        if (e.Item is not MovieRatingWithNameDto updatedRating) return;

        if (updatedRating.MovieId == Guid.Empty)
        {
            SetStatusMessage("Please select a movie before saving", true);
            return;
        }

        try
        {
            var success = await RatingService.UpdateRatingAsync(updatedRating.Id, updatedRating);
            
            if (success)
            {
                SetStatusMessage("Successfully updated rating", false);
                await LoadData(); // Refresh to get updated movie names
            }
            else
            {
                SetStatusMessage("Failed to update rating", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error updating rating: {ex.Message}", true);
        }
    }

    private async Task OnDeleteHandler(GridCommandEventArgs e)
    {
        if (e.Item is not MovieRatingWithNameDto ratingToDelete) return;

        try
        {
            var success = await RatingService.DeleteRatingAsync(ratingToDelete.Id);
            
            if (success)
            {
                ratings.Remove(ratingToDelete);
                SetStatusMessage("Successfully deleted rating", false);
            }
            else
            {
                SetStatusMessage("Failed to delete rating", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error deleting rating: {ex.Message}", true);
        }
    }

    private async Task OnCreateHandler(GridCommandEventArgs e)
    {
        if (e.Item is not MovieRatingWithNameDto newRating) return;

        if (newRating.MovieId == Guid.Empty)
        {
            SetStatusMessage("Please select a movie before saving", true);
            return;
        }

        try
        {
            var createDto = new CreateRatingDto
            {
                MovieId = newRating.MovieId,
                Rating = newRating.Rating,
                UserId = newRating.UserId
            };

            var success = await RatingService.CreateRatingAsync(createDto);
            
            if (success)
            {
                await LoadData(); // Refresh to show new rating
                SetStatusMessage("Successfully created rating", false);
            }
            else
            {
                SetStatusMessage("Failed to create rating", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error creating rating: {ex.Message}", true);
        }
    }

    private void SetStatusMessage(string message, bool error)
    {
        statusMessage = message;
        isError = error;
        StateHasChanged();
        
        Task.Delay(5000).ContinueWith(_ => ClearStatusMessage());
    }

    private void ClearStatusMessage()
    {
        statusMessage = "";
        StateHasChanged();
    }
}