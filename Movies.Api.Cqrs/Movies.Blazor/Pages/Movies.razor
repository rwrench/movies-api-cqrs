@page "/movies"
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using global::Movies.Api.Contracts.Models
@using global::Movies.Api.Contracts.Services
@inject IMovieService MovieService

<PageTitle>Movies</PageTitle>

<h1>Movies</h1>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(isError ? "alert-danger" : "alert-success")" role="alert">
        @statusMessage
    </div>
}

<TelerikGrid Data="@movies"
             Pageable="true"
             PageSize="20"
             Sortable="true"
             Height="80vh"
             FilterMode="Telerik.Blazor.GridFilterMode.FilterRow"
             EditMode="GridEditMode.Inline"
             Resizable="true"
             @ref="gridRef"
             OnUpdate="@OnUpdateHandler"
             OnDelete="@OnDeleteHandler"
             OnCreate="@OnCreateHandler"
             OnEdit="@OnEditHandler"
             OnCancel="@OnCancelHandler">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add">Add Movie</GridCommandButton>
    </GridToolBarTemplate>
    <GridColumns>
        <GridColumn Field="Title" Title="Title" Editable="true" Width="400px" />
        <GridColumn Field="YearOfRelease" Title="Year" Editable="true" Width="100px" />
        <GridColumn Title="Genres" Width="200px">
            <Template Context="movieObj">
                @{
                    var movie = movieObj as Movie;
                    if (movie != null)
                    {
                        <Movies.Blazor.Pages.GenresDisplay Genres="@movie.Genres" />
                    }
                }
            </Template>
        </GridColumn>
        <GridCommandColumn Width="280px">
            <GridCommandButton Command="Edit" ShowInEdit="false">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" ShowInEdit="false">Delete</GridCommandButton>
            <GridCommandButton Command="Save" ShowInEdit="true">Save</GridCommandButton>
            <GridCommandButton Command="Cancel" ShowInEdit="true">Cancel</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {
    private List<Movie> movies = new();
    private TelerikGrid<Movie>? gridRef;
    private string statusMessage = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviesAsync();
    }
    async Task LoadMoviesAsync()
    {
        try
        {
            movies = await MovieService.GetMoviesAsync();
            SetStatusMessage($"Loaded {movies.Count} movies", false);
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error loading movies: {ex.Message}", true);
        }
    }

    private Task OnEditHandler(GridCommandEventArgs e)
    {
        return Task.CompletedTask;
    }

    private Task OnCancelHandler(GridCommandEventArgs e)
    {
        ClearStatusMessage();
        return Task.CompletedTask;
    }

    private async Task OnUpdateHandler(GridCommandEventArgs e)
    {
        if (e.Item is not Movie updatedMovie) return;

        try
        {
            var success = await MovieService.UpdateMovieAsync(updatedMovie);

            if (success)
            {
                SetStatusMessage($"Successfully updated movie: {updatedMovie.Title}", false);
                await LoadMoviesAsync(); // Refresh the grid data
            }
            else
            {
                SetStatusMessage("Failed to update movie", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error updating movie: {ex.Message}", true);
        }
    }

    private async Task OnDeleteHandler(GridCommandEventArgs e)
    {
        if (e.Item is not Movie movieToDelete) return;

        try
        {
            var success = await MovieService.DeleteMovieAsync(movieToDelete.MovieId);

            if (success)
            {
                movies.Remove(movieToDelete);
                SetStatusMessage($"Successfully deleted movie: {movieToDelete.Title}", false);
            }
            else
            {
                SetStatusMessage("Failed to delete movie", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error deleting movie: {ex.Message}", true);
        }

    }

    private async Task OnCreateHandler(GridCommandEventArgs e)
    {
        if (e.Item is not Movie newMovie) return;


        try
        {
            // Create a new movie with required properties
            var movieToCreate = new Movie
            {
                MovieId = Guid.NewGuid(),
                Title = newMovie.Title,
                YearOfRelease = newMovie.YearOfRelease,
                Genres = newMovie.Genres ?? new List<string>()
            };

            var success = await MovieService.CreateMovieAsync(movieToCreate);

            if (success)
            {
                await LoadMoviesAsync(); // Refresh the grid data
                SetStatusMessage($"Successfully created movie: {movieToCreate.Title}", false);
            }
            else
            {
                SetStatusMessage("Failed to create movie", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error creating movie: {ex.Message}", true);
        }
    }



    private void SetStatusMessage(string message, bool error)
    {
        statusMessage = message;
        isError = error;
        StateHasChanged();
        
        Task.Delay(5000).ContinueWith(_ => ClearStatusMessage());
    }

    private void ClearStatusMessage()
    {
        statusMessage = "";
        StateHasChanged();
    }
}
